@page "/datasetinfos"
@using Microsoft.AspNetCore.Components.QuickGrid
@using CFAIProcessor.Interfaces
@using CFAIProcessor.Models

@inject IDataSetInfoService DataSetInfoService

@using System.IO
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Administrator,User")]

<h3>Index</h3>

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) =>
    {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

<p>
    <a href="datasetinfos/create">Add New</a>    

    <br/>
    <div style="display: inline-block">
      
    </div>
</p>

@if (DataSetInfosQueryable == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Class="table" Items="@DataSetInfosQueryable">
        <PropertyColumn Property="dataSetInfo => dataSetInfo.Name" />

        <TemplateColumn Context="dataSetInfo">
            <a href="@($"datasetinfos/details?id={dataSetInfo.Id}")">Details</a>
            <a href="@($"predictions/predict?id={dataSetInfo.Id}")">Predict</a>
            <a href="@($"predictions/train?id={dataSetInfo.Id}")">Train</a>            
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private IQueryable<DataSetInfo> DataSetInfosQueryable;

    private bool IsBusy { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;

        await RefreshDataSetInfosAsync();
    }

    private async Task RefreshDataSetInfosAsync()
    {
        IsBusy = true;

        DataSetInfosQueryable = DataSetInfoService.GetAll()
                        .OrderBy(dsi => dsi.Name)
                        .AsQueryable();

        IsBusy = false;
    }  
}
