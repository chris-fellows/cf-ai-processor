@page "/imagesetinfos/details"

@using CFAIProcessor.Interfaces
@using CFAIProcessor.Models
@using CFAIProcessor.UI.Utilities
@inject NavigationManager NavigationManager
@inject IImageSetInfoService ImageSetInfoService

@attribute [Authorize(Roles = "Administrator,User")]

@using System.IO
@inject IJSRuntime JS

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) =>
    {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

<h3>Details</h3>

<ActivityIndicator IsBusy="@IsBusy" />

<div>
    <button @onclick="DownloadAsync" class="btn btn-primary">Download</button>
    <hr />
    @if (ImageSetInfo is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@ImageSetInfo.Name</dd>
        </dl>
        <div>
            <a href="@($"/imagesetinfos")">Back to List</a>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private string Id { get; set; }

    private ImageSetInfo? ImageSetInfo { get; set; }

    private bool IsBusy { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        ImageSetInfo = ImageSetInfoService.GetById(Id);

        if (ImageSetInfo is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DownloadAsync()
    {
        //using (var session = new DisposableActionsSession())
        //{
        IsBusy = true;
        //session.AddAction(() => IsBusy = false);

        var fileStream = File.OpenRead(ImageSetInfo.DataSource);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", Path.GetFileName(ImageSetInfo.DataSource), streamRef);

        IsBusy = false;
        //}
    }
}
